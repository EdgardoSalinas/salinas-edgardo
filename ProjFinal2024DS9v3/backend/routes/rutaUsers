const express = require('express');
const router = express.Router();
const User = require('../models/modelUser');
const bcrypt = require('bcrypt'); // For password hashing
const jwt = require('jsonwebtoken');
const { authenticateToken, validateUserType, authAndValidateUserType } = require('../middleware/authMiddleware');

const userController = require('../controllers/userController');
//const { validateUserType } = require('./authMiddleware');

const multer = require('multer');
const path = require('path');

// Secret key for JWT (store this securely, preferably in an environment variable)
const JWT_SECRET = process.env.JWT_SECRET || 'llavesecreta';


// Configuración de multer para manejar la subida de archivos
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, '../uploads/') // Asegúrate de que este directorio exista
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname)) // Añade la extensión original del archivo
  }
});

const upload = multer({ storage: storage });
//const upload = multer({ dest: 'uploads/' }); // Guarda los archivos en el director

// para insertar el usuario en mongo
router.post('/register', userController.postRegister);


// Route to validate user credentials
// router.post('/login', async (req, res)
router.post('/login', userController.postLogin) ;


// para profile
router.get('/profile', authenticateToken, userController.getProfile);

// Ruta para actualizar el perfil del usuario
router.post('/profileUpdate', authenticateToken, upload.single('photo'), userController.postProfileUpdate);

// Ruta para validar el token desde login y perfil cuando llaman auth.js
router.get('/validate-token', (req, res) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ isValid: false, message: 'No token provided' });
  }

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) {
      console.error('Token verification error:', err);
      return res.status(403).json({ isValid: false, message: 'Invalid token' });
    }

    // Opcionalmente, puedes realizar verificaciones adicionales aquí
    // Por ejemplo, comprobar si el usuario aún existe en la base de datos

    res.json({ isValid: true, message: 'Token is valid', userId: decoded.userId });
  });
});


module.exports = router;

